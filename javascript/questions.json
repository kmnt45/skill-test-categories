[
  {
    "question": "Что такое ECMAScript? В чём отличие от JavaScript?",
    "answer": "ECMAScript — это спецификация, стандарт скриптовых языков программирования, он является основой JS, поэтому любые изменения ECMAScript отражаются на JS.\n\nECMAScript сам по себе — это не язык программирования. А вот JavaScript — это язык программирования, реализующий стандарт ECMAScript.\n\nЧто было добавлено в ES6:\n- Стрелочные функции и интерполяция в строках\n- Ключевое слово const\n- Блочная видимость\n- Параметры по умолчанию\n- Классы и наследование\n- Оператор for-of для перебора итерируемых объектов в цикле\n- spread и rest операторы\n- Обещания (Promises)\n- Модули"
  },
  {
    "question": "Типы данных в JavaScript?",
    "answer": "number\nstring\nboolean\nnull\nundefined\nsymbol\nbigint\nobject"
  },
  {
    "question": "Что такое Symbol?",
    "answer": "Символ (Symbol) — тип данных, значения которого создаются с помощью вызова функции Symbol. Каждый созданный символ уникален.\n\nСимволы могут использоваться в качестве имён свойств в объектах. Символьные свойства могут быть прочитаны только при прямом обращении и не видны при обычных операциях.\n\nПример:\nconst sym = Symbol()\nconst symTwo = Symbol()\nconsole.log(sym === symTwo) // false\n\nСимволы используются для создания скрытых свойств объектов, не видимых в for...in. Это удобно, если нужно защитить данные от случайной модификации.\n\nТакже существуют well-known symbols, такие как Symbol.iterator — для реализации обхода коллекций.\n"
  },
  {
    "question": "Что такое BigInt?",
    "answer": "BigInt — это тип данных для работы с целыми числами произвольной длины. Он используется, когда числа превышают пределы стандартного числового типа Number.\n\nПример: BigInt(123456789012345678901234567890)"
  },
  {
    "question": "Разница между let, const и var?",
    "answer": "var:\n- Область видимости — функция\n- Поднимается (hoisting)\n- Можно переопределить и переназначить\n\nlet:\n- Область видимости — блок\n- Находится в временной мёртвой зоне до инициализации\n- Можно переназначить, но нельзя переопределить\n\nconst:\n- Область видимости — блок\n- Находится в временной мёртвой зоне до инициализации\n- Нельзя переназначить и переопределить"
  },
  {
    "question": "Что такое временная мёртвая зона (temporal dead zone)?",
    "answer": "Это период между началом области видимости переменной (let/const) и её фактической инициализацией. Доступ к переменной в этом периоде вызывает ошибку."
  },
  {
    "question": "Разница между Rest и Spread операторами?",
    "answer": "Spread (...) — раскладывает массив или объект на отдельные значения: [...arr], {...obj}\nRest (...) — собирает остаток в массив или объект: function(...args), const {a, ...rest} = obj"
  },
  {
    "question": "Что такое деструктуризация?",
    "answer": "Это способ извлечения значений из массивов и объектов в отдельные переменные.\n\nПримеры:\nМассив: const [a, b] = [1, 2]\nОбъект: const {x, y} = {x: 1, y: 2}"
  },
  {
    "question": "Разница между == и === (нестрогое/строгое равенство)?",
    "answer": "== сравнивает значения с приведением типов\n=== сравнивает значения без приведения типов (и тип, и значение должны совпадать)"
  },
  {
    "question": "Что такое Strict mode в JavaScript?",
    "answer": "Strict mode (строгий режим) — это специальный режим выполнения кода, который включает дополнительные ограничения и проверки. Включается директивой use strict;\n\nОн помогает писать безопасный и предсказуемый код, например, запрещает неявное создание переменных."
  }
]