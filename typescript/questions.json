[
  {
    "question": "Что такое TypeScript?",
    "answer": "TypeScript — это надмножество JavaScript, добавляющее статическую типизацию и другие возможности, такие как интерфейсы, перечисления и декораторы."
  },
  {
    "question": "Что такое интерфейс в TypeScript?",
    "answer": "Интерфейс — это способ описания структуры объекта. Он определяет, какие свойства и методы должен иметь объект."
  },
  {
    "question": "В чём отличие type и interface?",
    "answer": "interface позволяет расширение (extends) и слияние деклараций. type — более гибкий (можно объединять типы, использовать условные типы), но не поддерживает множественное расширение так же, как интерфейсы."
  },
  {
    "question": "Что такое enum?",
    "answer": "enum — это перечисление, позволяющее задать набор именованных констант. Может быть числовым или строковым."
  },
  {
    "question": "Что делает оператор as в TypeScript?",
    "answer": "Оператор as используется для приведения типа (type assertion) — указывает компилятору, как именно следует интерпретировать тип переменной."
  },
  {
    "question": "Можно ли использовать TypeScript без явного указания типов?",
    "answer": "Да, TypeScript имеет механизм вывода типов (type inference), который позволяет не указывать типы явно в простых случаях."
  },
  {
    "question": "Что такое never в TypeScript?",
    "answer": "Тип never обозначает значения, которые никогда не возникают. Используется для функций, которые выбрасывают исключения или не завершаются (например, бесконечный цикл)."
  },
  {
    "question": "В чём разница между any и unknown?",
    "answer": "any отключает проверку типов, можно делать что угодно. unknown — безопасная альтернатива: перед использованием требуется проверка типа."
  },
  {
    "question": "Что делает ключевое слово readonly?",
    "answer": "readonly делает свойство доступным только для чтения: его нельзя изменить после инициализации."
  },
  {
    "question": "Что такое Utility Types?",
    "answer": "Utility Types — это встроенные дженерики TypeScript, которые упрощают работу с типами. Примеры: Partial<T>, Pick<T, K>, Omit<T, K>, Readonly<T> и др."
  }
]
